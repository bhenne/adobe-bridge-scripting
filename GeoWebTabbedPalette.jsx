// This is more or less a bad proof-of-concept. It would be nice to view GPS data on a map in Adobe Bridge!// This snippet is based on SnpCreateWebTabbedPalette and inspired by BridgeGeotagger.jsx.function GeoWebTabbedPalette(){    	// Load the XMP Script library	if( xmpLib == undefined ) 	{		if( Folder.fs == "Windows" )		{			var pathToLib = Folder.startup.fsName + "/AdobeXMPScript.dll";		} 		else 		{			var pathToLib = Folder.startup.fsName + "/AdobeXMPScript.framework";		}			var libfile = new File( pathToLib );		var xmpLib = new ExternalObject("lib:" + pathToLib );	}                	this.requiredContext = "\tExecute against Bridge main engine.\nBridge must not be running";	$.level = 1; // Debugging level	this.paletteRefs = null;}/** Functional part of this snippet.    Creates the TabbedPalette object, pointing it to the Adobe home page. Adds the tab to all open Bridge browser windows. Defines and registers an event handler to listen for the creation of a new Bridge browser window, then  adds the tab to that window.	@return True if the snippet ran as expected, false otherwise.  	@type Boolean*/GeoWebTabbedPalette.prototype.run = function(){		var retval = true;	if(!this.canRun())    	{		retval = false;			return retval;	}	this.paletteRefs = new Array();	var wrapper = this;	// Create the palette of type "web"	function addWebPalette(doc)	{		var webPalette = new TabbedPalette(doc, 						"GeoWebTabbedPalette", 						"GeoWebPalette", "web",                             "http://www.openstreetmap.org/" );		wrapper.paletteRefs.push(webPalette)	}		// Add the tabbed palette to all open Bridge windows	for(var i = 0;i < app.documents.length;i++)	{		addWebPalette(app.documents[i]);	}	// Create the event handler	onNewBrowserEvent = function( event )	{		if(event.object instanceof Document)		{			// If a new Bridge window is opened then add the tabbed palette			if( event.type == "create" )			{				addWebPalette(event.object);			}             if (event.type == "selectionsChanged") {					selectionsChanged(event.object);            }		}		return { handled: false };  // Continue to do other handlers	}		// Add the event handler to the application	app.eventHandlers.push( { handler: onNewBrowserEvent} );	return retval;}	// Respond to selection changes	function selectionsChanged(doc) {		var dec_lng = 0;         var dec_lat = 0;		var thumb_count = 0;		for(var i=0; i < doc.selectionsLength; i++) 		{            var thumb = app.document.selections[i];            palette = undefined;            for (var i = 0; i < app.document.palettes.length; ++i) {                if (app.document.palettes[i].id == "GeoWebPalette")                    palette = app.document.palettes[i]             }				if(thumb.hasMetadata && palette != undefined)			{				// Get the metadata object - wait for  valid values				var md = thumb.synchronousMetadata;								// Get GPS values from EXIF				var gps_lat = md.read(XMPConst.NS_EXIF,"GPSLatitude");				var gps_lat_ref = md.read(XMPConst.NS_EXIF,"GPSLatitudeRef");								var gps_lng = md.read(XMPConst.NS_EXIF,"GPSLongitude");				var gps_lng_ref = md.read(XMPConst.NS_EXIF,"GPSLongitudeRef");								if(gps_lat != undefined && gps_lng != undefined && gps_lat != '' && gps_lng != '') 				{					dec_lat = gps2dec(gps_lat, gps_lat_ref);					dec_lng = gps2dec(gps_lng, gps_lng_ref);                    palette.url = "http://www.openstreetmap.org/index.html?mlat="+dec_lat+"&mlon="+dec_lng;				}                else                {                    if (palette.url.indexOf("mlat") > -1)                        palette.url = "http://www.openstreetmap.org/index.html?lat=0&lon=0&zoom=0";                                        }			}		}}function gps2dec(gps_string, gps_string_ref) //from BridgeGeotagger.jsx{	// Convert from deg,min,sec representation to decimal value	if (("NESW").indexOf( gps_string.substring(gps_string.length-1) ) >=0 ) 	{		gps_string_ref = gps_string.substring(gps_string.length-1);		gps_string = gps_string.substring(0, gps_string.length-1);	}	var gps = gps_string.split(",");		var deg = parseFloat(gps[0]);	if ( gps_string_ref && ("SW").indexOf(gps_string_ref)>=0 )		deg = -Math.abs(deg);	var min = (gps.length >= 2) ? parseFloat(gps[1]) : 0;	var sec = (gps.length >= 3) ? parseFloat(gps[2]) : 0;	return deg + (min/60) + (sec/(60*60));}/**  Determines whether snippet can be run given current context.  The snippet   fails if these preconditions are not met:  <ul>  <li> Must be running in Bridge  </ul>   @return True is this snippet can run, false otherwise  @type boolean*/GeoWebTabbedPalette.prototype.canRun = function(){		// Need to be running in Bridge 	if(BridgeTalk.appName == "bridge") 	{		return true;			}		// Fail if these preconditions are not met.  	// Bridge must be running,	$.writeln("ERROR:: Cannot run GeoWebTabbedPalette");	$.writeln(this.requiredContext);	return false;	}/** "main program": construct an anonymous instance and run it  as long as we are not unit-testing this snippet.*/if(typeof(GeoWebTabbedPalette_unitTest)  == "undefined") {    new GeoWebTabbedPalette().run();}